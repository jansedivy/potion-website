webpackJsonp([10],[
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var Potion = __webpack_require__(1);
	
	var app = Potion.init(document.querySelector(".game"), {
	  configure: function configure() {
	    this.setSize(document.body.clientWidth, document.body.clientHeight);
	  },
	
	  init: function init() {
	    this.particles = [];
	    this.lastPosition = { x: null, y: null };
	  },
	
	  mousemove: function mousemove(value) {
	    if (this.lastPosition.x && this.lastPosition.y) {
	      var dx = (value.x - this.lastPosition.x) * 20;
	      var dy = (value.y - this.lastPosition.y) * 20;
	      this.particles.push(new Particle(value.x, value.y, dx, dy));
	    }
	
	    this.lastPosition.x = this.input.mouse.x;
	    this.lastPosition.y = this.input.mouse.y;
	  },
	
	  update: function update(time) {
	    for (var i = 0, len = this.particles.length; i < len; i++) {
	      var particle = this.particles[i];
	      if (particle) {
	        particle.update(time);
	      }
	    }
	  },
	
	  render: function render() {
	    for (var i = 0, len = this.particles.length; i < len; i++) {
	      var particle = this.particles[i];
	      if (particle) {
	        particle.render();
	      }
	    }
	  }
	});
	
	var Particle = function Particle(x, y, dx, dy) {
	  this.x = x;
	  this.y = y;
	  this.r = Math.random() * 20 + 5;
	  this.dx = dx;
	  this.dy = dy;
	
	  var colors = ["#04819e", "#38b2ce", "#60b9ce", "#015367", "#ff9900"];
	  this.color = colors[Math.floor(colors.length * Math.random())];
	};
	
	Particle.prototype.update = function (time) {
	  this.dx = this.dx + (0 - this.dx) * time;
	  this.dy = this.dy + (0 - this.dy) * time;
	
	  this.r = this.r + (0 - this.r) * time;
	
	  if (this.r <= 0.5) {
	    app.particles.splice(app.particles.indexOf(this), 1);
	  }
	
	  this.x += this.dx * time;
	  this.y += this.dy * time;
	};
	
	Particle.prototype.render = function () {
	  app.video.ctx.beginPath();
	  app.video.ctx.arc(this.x, this.y, this.r, 0, Math.PI * 2, false);
	  app.video.ctx.strokeStyle = this.color;
	  app.video.ctx.stroke();
	  app.video.ctx.closePath();
	};

/***/ }
]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9leGFtcGxlcy9kZW1vLXBhcnRpY2xlcy9hcHAuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsS0FBSSxNQUFNLEdBQUcsbUJBQU8sQ0FBQyxDQUFRLENBQUMsQ0FBQzs7QUFFL0IsS0FBSSxHQUFHLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxFQUFFO0FBQ3JELFlBQVMsRUFBRSxxQkFBVztBQUNwQixTQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDckU7O0FBRUQsT0FBSSxFQUFFLGdCQUFXO0FBQ2YsU0FBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7QUFDcEIsU0FBSSxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDO0lBQzFDOztBQUVELFlBQVMsRUFBRSxtQkFBUyxLQUFLLEVBQUU7QUFDekIsU0FBSSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRTtBQUM5QyxXQUFJLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQzlDLFdBQUksRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDOUMsV0FBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO01BQzdEOztBQUVELFNBQUksQ0FBQyxZ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WUFBVztBQUNyQyxNQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUMxQixNQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFLEdBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQy9ELE1BQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO0FBQ3ZDLE1BQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQ3ZCLE1BQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxDQUFDO0VBQzNCLEMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgUG90aW9uID0gcmVxdWlyZSgncG90aW9uJyk7XG5cbnZhciBhcHAgPSBQb3Rpb24uaW5pdChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZ2FtZScpLCB7XG4gIGNvbmZpZ3VyZTogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zZXRTaXplKGRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGgsIGRvY3VtZW50LmJvZHkuY2xpZW50SGVpZ2h0KTtcbiAgfSxcblxuICBpbml0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnBhcnRpY2xlcyA9IFtdO1xuICAgIHRoaXMubGFzdFBvc2l0aW9uID0geyB4OiBudWxsLCB5OiBudWxsIH07XG4gIH0sXG5cbiAgbW91c2Vtb3ZlOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmICh0aGlzLmxhc3RQb3NpdGlvbi54ICYmIHRoaXMubGFzdFBvc2l0aW9uLnkpIHtcbiAgICAgIHZhciBkeCA9ICh2YWx1ZS54IC0gdGhpcy5sYXN0UG9zaXRpb24ueCkgKiAyMDtcbiAgICAgIHZhciBkeSA9ICh2YWx1ZS55IC0gdGhpcy5sYXN0UG9zaXRpb24ueSkgKiAyMDtcbiAgICAgIHRoaXMucGFydGljbGVzLnB1c2gobmV3IFBhcnRpY2xlKHZhbHVlLngsIHZhbHVlLnksIGR4LCBkeSkpO1xuICAgIH1cblxuICAgIHRoaXMubGFzdFBvc2l0aW9uLnggPSB0aGlzLmlucHV0Lm1vdXNlLng7XG4gICAgdGhpcy5sYXN0UG9zaXRpb24ueSA9IHRoaXMuaW5wdXQubW91c2UueTtcbiAgfSxcblxuICB1cGRhdGU6IGZ1bmN0aW9uKHRpbWUpIHtcbiAgICBmb3IgKHZhciBpPTAsIGxlbj10aGlzLnBhcnRpY2xlcy5sZW5ndGg7IGk8bGVuOyBpKyspIHtcbiAgICAgIHZhciBwYXJ0aWNsZSA9IHRoaXMucGFydGljbGVzW2ldO1xuICAgICAgaWYgKHBhcnRpY2xlKSB7IHBhcnRpY2xlLnVwZGF0ZSh0aW1lKTsgfVxuICAgIH1cbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIGk9MCwgbGVuPXRoaXMucGFydGljbGVzLmxlbmd0aDsgaTxsZW47IGkrKykge1xuICAgICAgdmFyIHBhcnRpY2xlID0gdGhpcy5wYXJ0aWNsZXNbaV07XG4gICAgICBpZiAocGFydGljbGUpIHsgcGFydGljbGUucmVuZGVyKCk7IH1cbiAgICB9XG4gIH1cbn0pO1xuXG52YXIgUGFydGljbGUgPSBmdW5jdGlvbih4LCB5LCBkeCwgZHkpIHtcbiAgdGhpcy54ID0geDtcbiAgdGhpcy55ID0geTtcbiAgdGhpcy5yID0gTWF0aC5yYW5kb20oKSAqIDIwICsgNTtcbiAgdGhpcy5keCA9IGR4O1xuICB0aGlzLmR5ID0gZHk7XG5cbiAgdmFyIGNvbG9ycyA9IFsnIzA0ODE5ZScsICcjMzhiMmNlJywgJyM2MGI5Y2UnLCAnIzAxNTM2NycsICcjZmY5OTAwJ107XG4gIHRoaXMuY29sb3IgPSBjb2xvcnNbTWF0aC5mbG9vcihjb2xvcnMubGVuZ3RoICogTWF0aC5yYW5kb20oKSldO1xufTtcblxuUGFydGljbGUucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKHRpbWUpIHtcbiAgdGhpcy5keCA9IHRoaXMuZHggKyAoMCAtIHRoaXMuZHgpICogdGltZTtcbiAgdGhpcy5keSA9IHRoaXMuZHkgKyAoMCAtIHRoaXMuZHkpICogdGltZTtcblxuICB0aGlzLnIgPSB0aGlzLnIgKyAoMCAtIHRoaXMucikgKiB0aW1lO1xuXG4gIGlmICh0aGlzLnIgPD0gMC41KSB7XG4gICAgYXBwLnBhcnRpY2xlcy5zcGxpY2UoYXBwLnBhcnRpY2xlcy5pbmRleE9mKHRoaXMpLCAxKTtcbiAgfVxuXG4gIHRoaXMueCArPSB0aGlzLmR4ICogdGltZTtcbiAgdGhpcy55ICs9IHRoaXMuZHkgKiB0aW1lO1xufTtcblxuUGFydGljbGUucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICBhcHAudmlkZW8uY3R4LmJlZ2luUGF0aCgpO1xuICBhcHAudmlkZW8uY3R4LmFyYyh0aGlzLngsIHRoaXMueSwgdGhpcy5yLCAwLCBNYXRoLlBJKjIsIGZhbHNlKTtcbiAgYXBwLnZpZGVvLmN0eC5zdHJva2VTdHlsZSA9IHRoaXMuY29sb3I7XG4gIGFwcC52aWRlby5jdHguc3Ryb2tlKCk7XG4gIGFwcC52aWRlby5jdHguY2xvc2VQYXRoKCk7XG59O1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9leGFtcGxlcy9kZW1vLXBhcnRpY2xlcy9hcHAuanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiIsImZpbGUiOiJkZW1vLXBhcnRpY2xlcy5qcyJ9