webpackJsonp([10],[
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var Potion = __webpack_require__(1);
	
	var app = Potion.init(document.querySelector(".game"), {
	  configure: function configure() {
	    this.setSize(document.body.clientWidth, document.body.clientHeight);
	    this.config.allowHiDPI = true;
	  },
	
	  init: function init() {
	    this.particles = [];
	    this.lastPosition = { x: null, y: null };
	  },
	
	  mousemove: function mousemove(value) {
	    if (this.lastPosition.x && this.lastPosition.y) {
	      var dx = (value.x - this.lastPosition.x) * 20;
	      var dy = (value.y - this.lastPosition.y) * 20;
	      this.particles.push(new Particle(value.x, value.y, dx, dy));
	    }
	
	    this.lastPosition.x = this.input.mouse.x;
	    this.lastPosition.y = this.input.mouse.y;
	  },
	
	  update: function update(time) {
	    for (var i = 0, len = this.particles.length; i < len; i++) {
	      var particle = this.particles[i];
	      if (particle) {
	        particle.update(time);
	      }
	    }
	  },
	
	  render: function render() {
	    for (var i = 0, len = this.particles.length; i < len; i++) {
	      var particle = this.particles[i];
	      if (particle) {
	        particle.render();
	      }
	    }
	  }
	});
	
	var Particle = function Particle(x, y, dx, dy) {
	  this.x = x;
	  this.y = y;
	  this.r = Math.random() * 20 + 5;
	  this.dx = dx;
	  this.dy = dy;
	
	  var colors = ["#04819e", "#38b2ce", "#60b9ce", "#015367", "#ff9900"];
	  this.color = colors[Math.floor(colors.length * Math.random())];
	};
	
	Particle.prototype.update = function (time) {
	  this.dx = this.dx + (0 - this.dx) * time;
	  this.dy = this.dy + (0 - this.dy) * time;
	
	  this.r = this.r + (0 - this.r) * time;
	
	  if (this.r <= 0.5) {
	    app.particles.splice(app.particles.indexOf(this), 1);
	  }
	
	  this.x += this.dx * time;
	  this.y += this.dy * time;
	};
	
	Particle.prototype.render = function () {
	  app.video.ctx.beginPath();
	  app.video.ctx.arc(this.x, this.y, this.r, 0, Math.PI * 2, false);
	  app.video.ctx.strokeStyle = this.color;
	  app.video.ctx.stroke();
	  app.video.ctx.closePath();
	};

/***/ }
]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9leGFtcGxlcy9kZW1vLXBhcnRpY2xlcy9hcHAuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsS0FBSSxNQUFNLEdBQUcsbUJBQU8sQ0FBQyxDQUFRLENBQUMsQ0FBQzs7QUFFL0IsS0FBSSxHQUFHLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxFQUFFO0FBQ3JELFlBQVMsRUFBRSxxQkFBVztBQUNwQixTQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDcEUsU0FBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO0lBQy9COztBQUVELE9BQUksRUFBRSxnQkFBVztBQUNmLFNBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO0FBQ3BCLFNBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQztJQUMxQzs7QUFFRCxZQUFTLEVBQUUsbUJBQVMsS0FBSyxFQUFFO0FBQ3pCLFNBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUU7QUFDOUMsV0FBSSxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUM5QyxXQUFJLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQzlDLFdBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsRUFBRSxFQUFFLEVB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QUMxQixDQUFDOztBQUVGLFNBQVEsQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLFlBQVc7QUFDckMsTUFBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLENBQUM7QUFDMUIsTUFBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxHQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUMvRCxNQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztBQUN2QyxNQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUN2QixNQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsQ0FBQztFQUMzQixDIiwic291cmNlc0NvbnRlbnQiOlsidmFyIFBvdGlvbiA9IHJlcXVpcmUoJ3BvdGlvbicpO1xuXG52YXIgYXBwID0gUG90aW9uLmluaXQoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmdhbWUnKSwge1xuICBjb25maWd1cmU6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc2V0U2l6ZShkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoLCBkb2N1bWVudC5ib2R5LmNsaWVudEhlaWdodCk7XG4gICAgdGhpcy5jb25maWcuYWxsb3dIaURQSSA9IHRydWU7XG4gIH0sXG5cbiAgaW5pdDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5wYXJ0aWNsZXMgPSBbXTtcbiAgICB0aGlzLmxhc3RQb3NpdGlvbiA9IHsgeDogbnVsbCwgeTogbnVsbCB9O1xuICB9LFxuXG4gIG1vdXNlbW92ZTogZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAodGhpcy5sYXN0UG9zaXRpb24ueCAmJiB0aGlzLmxhc3RQb3NpdGlvbi55KSB7XG4gICAgICB2YXIgZHggPSAodmFsdWUueCAtIHRoaXMubGFzdFBvc2l0aW9uLngpICogMjA7XG4gICAgICB2YXIgZHkgPSAodmFsdWUueSAtIHRoaXMubGFzdFBvc2l0aW9uLnkpICogMjA7XG4gICAgICB0aGlzLnBhcnRpY2xlcy5wdXNoKG5ldyBQYXJ0aWNsZSh2YWx1ZS54LCB2YWx1ZS55LCBkeCwgZHkpKTtcbiAgICB9XG5cbiAgICB0aGlzLmxhc3RQb3NpdGlvbi54ID0gdGhpcy5pbnB1dC5tb3VzZS54O1xuICAgIHRoaXMubGFzdFBvc2l0aW9uLnkgPSB0aGlzLmlucHV0Lm1vdXNlLnk7XG4gIH0sXG5cbiAgdXBkYXRlOiBmdW5jdGlvbih0aW1lKSB7XG4gICAgZm9yICh2YXIgaT0wLCBsZW49dGhpcy5wYXJ0aWNsZXMubGVuZ3RoOyBpPGxlbjsgaSsrKSB7XG4gICAgICB2YXIgcGFydGljbGUgPSB0aGlzLnBhcnRpY2xlc1tpXTtcbiAgICAgIGlmIChwYXJ0aWNsZSkgeyBwYXJ0aWNsZS51cGRhdGUodGltZSk7IH1cbiAgICB9XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICBmb3IgKHZhciBpPTAsIGxlbj10aGlzLnBhcnRpY2xlcy5sZW5ndGg7IGk8bGVuOyBpKyspIHtcbiAgICAgIHZhciBwYXJ0aWNsZSA9IHRoaXMucGFydGljbGVzW2ldO1xuICAgICAgaWYgKHBhcnRpY2xlKSB7IHBhcnRpY2xlLnJlbmRlcigpOyB9XG4gICAgfVxuICB9XG59KTtcblxudmFyIFBhcnRpY2xlID0gZnVuY3Rpb24oeCwgeSwgZHgsIGR5KSB7XG4gIHRoaXMueCA9IHg7XG4gIHRoaXMueSA9IHk7XG4gIHRoaXMuciA9IE1hdGgucmFuZG9tKCkgKiAyMCArIDU7XG4gIHRoaXMuZHggPSBkeDtcbiAgdGhpcy5keSA9IGR5O1xuXG4gIHZhciBjb2xvcnMgPSBbJyMwNDgxOWUnLCAnIzM4YjJjZScsICcjNjBiOWNlJywgJyMwMTUzNjcnLCAnI2ZmOTkwMCddO1xuICB0aGlzLmNvbG9yID0gY29sb3JzW01hdGguZmxvb3IoY29sb3JzLmxlbmd0aCAqIE1hdGgucmFuZG9tKCkpXTtcbn07XG5cblBhcnRpY2xlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbih0aW1lKSB7XG4gIHRoaXMuZHggPSB0aGlzLmR4ICsgKDAgLSB0aGlzLmR4KSAqIHRpbWU7XG4gIHRoaXMuZHkgPSB0aGlzLmR5ICsgKDAgLSB0aGlzLmR5KSAqIHRpbWU7XG5cbiAgdGhpcy5yID0gdGhpcy5yICsgKDAgLSB0aGlzLnIpICogdGltZTtcblxuICBpZiAodGhpcy5yIDw9IDAuNSkge1xuICAgIGFwcC5wYXJ0aWNsZXMuc3BsaWNlKGFwcC5wYXJ0aWNsZXMuaW5kZXhPZih0aGlzKSwgMSk7XG4gIH1cblxuICB0aGlzLnggKz0gdGhpcy5keCAqIHRpbWU7XG4gIHRoaXMueSArPSB0aGlzLmR5ICogdGltZTtcbn07XG5cblBhcnRpY2xlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgYXBwLnZpZGVvLmN0eC5iZWdpblBhdGgoKTtcbiAgYXBwLnZpZGVvLmN0eC5hcmModGhpcy54LCB0aGlzLnksIHRoaXMuciwgMCwgTWF0aC5QSSoyLCBmYWxzZSk7XG4gIGFwcC52aWRlby5jdHguc3Ryb2tlU3R5bGUgPSB0aGlzLmNvbG9yO1xuICBhcHAudmlkZW8uY3R4LnN0cm9rZSgpO1xuICBhcHAudmlkZW8uY3R4LmNsb3NlUGF0aCgpO1xufTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vZXhhbXBsZXMvZGVtby1wYXJ0aWNsZXMvYXBwLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIiLCJmaWxlIjoiZGVtby1wYXJ0aWNsZXMuanMifQ==